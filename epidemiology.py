# -*- coding: utf-8 -*-
"""Epidemiology.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_lpafKgogXNRvVd4tPGlo03lOximlHMg
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

#SIS Model
t = np.linspace(0,50)
i0 = 0.4
beta = 0.5

def model(i,t,beta,gamma):
  didt = (beta-gamma-beta*i)*i
  return didt

gamma = 0.05
y1 = odeint(model,i0,t,args=(beta,gamma))
gamma = 0.6
y2 = odeint(model,i0,t,args=(beta,gamma))

fig=plt.figure()
plt.plot(t,y1,'r',label='$beta > gamma$')
plt.plot(t,y2,'g',label='$beta < gamma$')
plt.xlim([0,50])
plt.xlabel('Time')
plt.ylabel('Infected people')
plt.grid(b=True, which='both',c='k',lw=1,ls=':')
legend = plt.legend()
legend.get_frame().set_alpha(0.5)



import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

t=np.linspace(0,3)
er=0.02
alfa=0.0001
a=0.01
delta=0.0082
n=10000
ce=50
satu=1
pe=13.44
be=1
teta=2.03
k=1.01
ks=0.0006
ki=0.6
kp=0.6
kc=0.8
gamma=-0.9
vm=1
m0,v0,i0,s0,p0,c0 = 13, 13, 13, 13, 13, 13

def model(y,t,er,alfa,a,delta,n,ce,satu,pe,be,teta,k,ks,ki,kp,kc,gamma,vm):
  m,v,i,s,p,c = y
  dmdt=gamma*m+vm
  dvdt=n*i-ce*v
  didt=alfa*s*v-a*i-delta*i-ki*m*i
  dsdt=er*s*satu-(s+i)-alfa*s*v-ks*m*s
  dpdt=delta*p*i+be*pe-(teta*p*p)/(satu+p*p)-ks*m*p
  dcdt=teta*p*p/(satu+p*p)-k*c-kc*m*c
  return dmdt, dvdt, didt, dsdt, dpdt, dcdt
y0=m0,v0,i0,s0,p0,c0
hasil = odeint(model,y0,t,args=(er,alfa,a,delta,n,ce,satu,pe,be,teta,k,ks,ki,kp,kc,gamma,vm))
m,v,i,s,p,c = hasil.T

fig=plt.figure()
plt.plot(t,s,'k',label='NORMAL')
plt.plot(t,i,'g',label='INFECTED')
plt.plot(t,v,'b',label='VIRUS')
plt.plot(t,p,'y',label='precancer')
plt.plot(t,c,'r',label='cancer')
plt.plot(t,m,'g',label='chemoterpy')
#plt.ylim([t0,1])
#plt.xlim([t0,tf])
plt.xlabel('Time')
plt.ylabel('Population')
plt.grid(b=True, which='both',c='k',lw=1,ls=':')
legend = plt.legend()
legend.get_frame().set_alpha(0.5)



import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

t0=0
tf=30
t = np.linspace(t0,tf)
miu = 0.0125
beta1 = 0.1961
beta2 = 0.0101
gamma1 = 0.0772
gamma2 = 0.1008
teta = 0.1245
c = 0.0822
p0, s0, e0, q0 = 0, 0.39, 0.3, 0.2

#PSEQ Model
def model(y,t,beta1,beta2,gamma1,gamma2,teta,miu,c):
  p,s,e,q = y
  dpdt = (miu*s)-(miu*p)-(beta1*p*s)
  dsdt = (beta1*s*p)+(beta2*s*q)+c*e-miu*s-(gamma1*s)-(teta*s*e)
  dedt = (teta*s*e)-(gamma2*e)-miu*e-c*e
  dqdt = (gamma1*s)+(gamma2*e)-(beta2*s*q)-miu*q
  return dpdt, dsdt, dedt, dqdt
y0=p0,s0,e0,q0
hasil = odeint(model,y0,t,args=(miu,beta1,beta2,gamma1,gamma2,teta,c))
p,s,e,q = hasil.T

fig=plt.figure()
plt.plot(t,p,'r',label='Susceptible')
plt.plot(t,s,'k',label='Exposed')
plt.plot(t,e,'g',label='Infected')
plt.plot(t,q,'b',label='Recovered')
#plt.ylim([t0,1])
#plt.xlim([t0,tf])
plt.xlabel('Time')
plt.ylabel('Population')
plt.grid(b=True, which='both',c='k',lw=1,ls=':')
legend = plt.legend()
legend.get_frame().set_alpha(0.5)

I'mimport numpy as np
import control as ct
import control.optimal as opt
import matplotlib.pyplot as plt

def vehicle_update(t, x, u, params):
    # Get the parameters for the model
    l = params.get('wheelbase', 3.)         # vehicle wheelbase
    phimax = params.get('maxsteer', 0.5)    # max steering angle (rad)

    # Saturate the steering input
    phi = np.clip(u[1], -phimax, phimax)

    # Return the derivative of the state
    return np.array([
        np.cos(x[2]) * u[0],            # xdot = cos(theta) v
        np.sin(x[2]) * u[0],            # ydot = sin(theta) v
        (u[0] / l) * np.tan(phi)        # thdot = v/l tan(phi)
    ])

def vehicle_output(t, x, u, params):
    return x                            # return x, y, theta (full state)

# Define the vehicle steering dynamics as an input/output system
vehicle = ct.NonlinearIOSystem(
    vehicle_update, vehicle_output, states=3, name='vehicle',
    inputs=('v', 'phi'), outputs=('x', 'y', 'theta'))

x0 = [0., -2., 0.]; u0 = [10., 0.]
xf = [100., 2., 0.]; uf = [10., 0.]
Tf = 10

Q = np.diag([0.1, 10, .1])    # keep lateral error low
R = np.eye(2) * 0.1
cost = opt.quadratic_cost(vehicle, Q, R, x0=xf, u0=uf)

constraints = [ opt.input_range_constraint(vehicle, [8, -0.1], [12, 0.1]) ]

horizon = np.linspace(0, Tf, 20, endpoint=True)
bend_left = [10, 0.01]        # slight left veer

result = opt.solve_ocp(
    vehicle, horizon, x0, cost, constraints, initial_guess=bend_left,
    options={'eps': 0.01})    # set step size for gradient calculation

# Extract the results
u = result.inputs
t, y = ct.input_output_response(vehicle, horizon, u, x0)

# Plot the results
plt.subplot(3, 1, 1)
plt.plot(y[0], y[1])
plt.plot(x0[0], x0[1], 'ro', xf[0], xf[1], 'ro')
plt.xlabel("x [m]")
plt.ylabel("y [m]")

plt.subplot(3, 1, 2)
plt.plot(t, u[0])
plt.axis([0, 10, 8.5, 11.5])
plt.plot([0, 10], [9, 9], 'k--', [0, 10], [11, 11], 'k--')
plt.xlabel("t [sec]")
plt.ylabel("u1 [m/s]")

plt.subplot(3, 1, 3)
plt.plot(t, u[1])
plt.axis([0, 10, -0.15, 0.15])
plt.plot([0, 10], [-0.1, -0.1], 'k--', [0, 10], [0.1, 0.1], 'k--')
plt.xlabel("t [sec]")
plt.ylabel("u2 [rad/s]")

plt.suptitle("Lane change manuever")
plt.tight_layout()
plt.show()



import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

#SI Model
t = np.linspace(0,25)
i0 = 0.05
def model(i,t,beta):
  didt = beta*(1-i)*i
  return didt

beta = 0.3
y1 = odeint(model,i0,t,args=(beta,))
beta = 0.5
y2 = odeint(model,i0,t,args=(beta,))
beta = 0.9
y3 = odeint(model,i0,t,args=(beta,))

fig=plt.figure()
plt.plot(t,y1,'r',label='$beta = 0.3$')
plt.plot(t,y2,'g',label='$beta = 0.5$')
plt.plot(t,y3,'b',label='$beta = 0.9$')
plt.xlim([0,25])
plt.xlabel('Time')
plt.ylabel('Infected people')
plt.grid(b=True, which='both',c='k',lw=1,ls=':')
legend = plt.legend()
legend.get_frame().set_alpha(0.5)